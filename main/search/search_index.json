{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#data-streaming-as-a-service-dsaas","title":"Data Streaming as a Service (DSaaS)","text":"<p>DSaaS is a service that enables users to upload, periodically update and share data between users.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install git+https://github.com/NSF-RESUME/DSaaS-client\n</code></pre>"},{"location":"#cli","title":"CLI","text":"<p>List all available data <pre><code>dsaas list\n</code></pre></p> <p>Create a data source <pre><code>dsaas create -n &lt;name&gt; -u &lt;url&gt; -e &lt;email&gt;\n</code></pre></p> <p>Get a specific source file <pre><code>dsaas get --source_id &lt;source_id&gt;\n</code></pre></p>"},{"location":"#creating-verifier-and-modifier-functions","title":"Creating verifier and modifier functions","text":"<pre><code># From dsaas_client/example.py\n\n# Example of the verifier/modifier function\n\n# NOTE:\n\n# The function must:\n#   1.    Take (*args, **kwargs)\n#   2.    Return args, kwargs\n#   3.    For verifier: raise `Exception` if the verifier is failed\n#   4.    For modifier: Before returning, kwargs['file']  = modified_file\n\n\ndef verifier(*args, **kwargs):\n\n    # Your downloaded file will be found in kwargs['file']\n    # Ensure that you replace the `modified` file to kwargs['file']\n\n    return args, kwargs\n\nfrom dsaas_client.api import source_file, register_function\n\ntry:\n    response = register_function(verifier)\n    assert response.get('code') == 200\n    function = response.get('function_id')\nexcept Exception as e:\n    print(e)\n</code></pre>"},{"location":"registering_flows/","title":"Registering Automated Flows","text":""},{"location":"registering_flows/#function-registration","title":"Function Registration","text":"Function Registration<pre><code>def wastewater_ingestion(wastewater: str) -&gt; AeroOutput:\n    \"\"\"\n    Example transformation function for wastewater data.\n\n    Args:\n        wastewater (str): Path of file on local filesystem.\n\n    Returns:\n        Name and path of the updated data on the filesystem.\n    \"\"\"\n    import pandas as pd\n    from aero_client.utils import AeroOutput\n\n    df = pd.read_csv(wastewater) # (1)\n    df = df.drop(columns=[\"influenza_a\", \"influenza_b\"]) # (2)\n    df.to_csv(wastewater)\n\n    return AeroOutput(name=\"wastewater\", path=wastewater)\n</code></pre> <ol> <li>Load the waste water data at the path given as an argument to perform the analyses.</li> <li>Perform some transformation onto the data.</li> </ol>"},{"location":"registering_flows/#registering-ingestions","title":"Registering Ingestions","text":"Flow Registration<pre><code>def register_ingestion():\n    endpoint_uuid = \"...\"\n    function_uuid = \"...\"\n    output_data = {\n        \"wastewater\": { # (1)\n            \"url\": \"...\",\n            \"collection_uuid\": \"...\",\n            \"collection_url\": \"...\",\n        },\n    }\n\n    return register_flow(\n        endpoint_uuid=endpoint_uuid,\n        function_uuid=function_uuid,\n        output_data=output_data,\n        description=\"Ingestion flow for waste water data.\",\n        policy=PolicyEnum.INGESTION, # (2)\n        timer_delay=86400, # (3)\n    )\n</code></pre> <ol> <li>The key (i.e., <code>\"wastewater\"</code>) must match the key from the earlier code sample for function registration.</li> <li>Specify a timer-based data ingestion policy, which has an implementation provided by AERO.</li> <li>Timer delay is specified in seconds. This value of <code>86400</code> makes the flow run on a daily basis.</li> </ol>"},{"location":"registering_flows/#flow-output","title":"Flow Output","text":"AERO Output<pre><code>{\n    \"contributed_to\": [\n        {\n            \"available_versions\": 1,\n            \"collection_url\": \"...\",\n            \"collection_uuid\": \"...\",\n            \"description\": \"...\",\n            \"id\": \"...\",\n            \"name\": \"wastewater\", # (1)\n            \"url\": \"...\"\n        }\n    ],\n    \"derived_from\" :[],\n    \"description\": \"...\",\n    \"endpoint\": \"...\",\n    \"function_args\": \"...\",\n    \"function_id\": \"...\",\n    \"id\": \"...\",\n    \"last_executed\": null,\n    \"policy\": 0,\n    \"timer\": 86400,\n    \"timer_job_id\": \"...\"\n}\n</code></pre>"},{"location":"docs/","title":"aero_client","text":"<code>           /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/aero_client/__init__.py         </code>"},{"location":"docs/#aero_client.api","title":"api","text":"<code>           /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/aero_client/api.py         </code> <p>DSaaS client API module</p>"},{"location":"docs/#aero_client.api.get_flow","title":"get_flow()","text":"<pre><code>get_flow(flow_id: str, inputs_only: bool = True) -&gt; dict\n</code></pre> <p>Get metadata on the flow provided a flow ID.</p> PARAMETER DESCRIPTION <code>flow_id</code> <p>The flow UUID</p> <p> TYPE: <code>str</code> </p> <code>inputs_only</code> <p>Whether to return flow input data exclusively. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>Flow metadata in dictionary representation.</p> <p> TYPE: <code>dict</code> </p>"},{"location":"docs/#aero_client.api.globus_logout","title":"globus_logout()","text":"<pre><code>globus_logout()\n</code></pre> <p>Remove the Globus Auth token file to invoke login on next API access.</p>"},{"location":"docs/#aero_client.api.list_metadata","title":"list_metadata()","text":"<pre><code>list_metadata(\n    metadata_type: Literal[\"data\", \"prov\", \"flow\"],\n) -&gt; Generator[JSON, JSON, JSON]\n</code></pre> <p>Get the metadata records.</p> PARAMETER DESCRIPTION <code>metadata_type</code> <p>List metadata of a certain type.</p> <p> TYPE: <code>Literal['data', 'prov', 'flow']</code> </p> RETURNS DESCRIPTION <code>JSON</code> <p>Generation[JSON]: a generator returning up to 15 metadata records at a time.</p>"},{"location":"docs/#aero_client.api.register_flow","title":"register_flow()","text":"<pre><code>register_flow(\n    endpoint_uuid: str,\n    function_uuid: str,\n    input_data: dict[str | dict[str | int | None]] = {},\n    output_data: dict[str | dict[str, str]] = {},\n    kwargs: JSON = {},\n    config: str | None = None,\n    description: str | None = None,\n    policy: PolicyEnum = PolicyEnum.NONE,\n    timer_delay: int | None = None,\n    pull_function_uuid: str | None = None,\n    commit_function_uuid: str | None = None,\n) -&gt; None\n</code></pre> <p>Register user function to run as a Globus Flow on remote server periodically.</p> PARAMETER DESCRIPTION <code>endpoint_uuid</code> <p>Globus Compute endpoint uuid</p> <p> TYPE: <code>str</code> </p> <code>function_uuid</code> <p>Globus Compute registered function UUID</p> <p> TYPE: <code>str</code> </p> <code>input_data</code> <p>The input data, presented in the format {\"name\": {\"id\": , \"version\": }}. Default is None. <p> TYPE: <code>(dict[str | dict[str, uuid | int]], optional)</code> DEFAULT: <code>{}</code> </p> <code>output_data</code> <p>The output data that will be created, presented in the format {\"name\": {\"url\": }}. Default is None. <p> TYPE: <code>dict[str | dict[str, str]]</code> DEFAULT: <code>{}</code> </p> <code>kwargs</code> <p>Keyword arguments to pass to function. Default is None</p> <p> TYPE: <code>JSON</code> DEFAULT: <code>{}</code> </p> <code>config</code> <p>Path to config file. Default is None.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description of the Flow. Default is None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>policy</code> <p>Which policy to use to rerun the flow. Default is never rerun.</p> <p> TYPE: <code>PolicyEnum</code> DEFAULT: <code>NONE</code> </p> <code>timer_delay</code> <p>The timer delay in seconds if PolicyEnum.TIMER is applied. Default is None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>pull_function_uuid</code> <p>the uuid returned when registering either <code>aero_client.jobs.download</code> or <code>aero_client.jobs.get_versions</code> with Globus Compute. The function will register with GC if not provided, but issues may arise if local python version does not match endpoint python version. default is none.</p> <p> TYPE: <code>str | none</code> DEFAULT: <code>None</code> </p> <code>commit_function_uuid</code> <p>the uuid returned when registering either <code>aero_client.jobs.database_commit</code> or <code>aero_client.jobs.commit_analysis</code> with Globus Compute. The function will register with GC if not provided, but issues may arise if local python version does not match endpoint python version. default is none.</p> <p> TYPE: <code>str | none</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>ClientError</code> <p>if function was not able to be registered as a flow, this error is raised</p> RETURNS DESCRIPTION <code>str</code> <p>the timer job uuid.</p> <p> TYPE: <code>None</code> </p>"},{"location":"docs/#aero_client.api.register_function","title":"register_function()","text":"<pre><code>register_function(func: Callable)\n</code></pre> <p>Register function to a Globus Compute Client.</p>"},{"location":"docs/#aero_client.api.search_sources","title":"search_sources()","text":"<pre><code>search_sources(query: str) -&gt; list[dict[str, str | int]]\n</code></pre> <p>Get the sources that match the query</p> PARAMETER DESCRIPTION <code>query</code> <p>a Globus Search query string</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>list[dict[str, str | int]]</code> <p>list[dict[str, str | int]]: list of sources matching the query</p>"},{"location":"docs/#aero_client.cli","title":"cli","text":"<code>           /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/aero_client/cli.py         </code> <p>Osprey Command-line interface.</p>"},{"location":"docs/#aero_client.cli.main","title":"main()","text":"<pre><code>main()\n</code></pre> <p>TODO</p>"},{"location":"docs/#aero_client.config","title":"config","text":"<code>           /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/aero_client/config.py         </code> <p>DSaaS client config module.</p>"},{"location":"docs/#aero_client.config.ClientConf","title":"ClientConf","text":"<p>Configuration for the AERO client.</p>"},{"location":"docs/#aero_client.config.ClientConf.client_uuid","title":"client_uuid  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>client_uuid: str = 'c78511ef-8cf7-4802-a7e1-7d56e27b1bf8'\n</code></pre> <p>...</p>"},{"location":"docs/#aero_client.error","title":"error","text":"<code>           /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/aero_client/error.py         </code> <p>DSaaS Client error definition module</p>"},{"location":"docs/#aero_client.error.ClientError","title":"ClientError","text":"<pre><code>ClientError(*args: object, **kwargs)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Error for the AERO client.</p>"},{"location":"docs/#aero_client.example","title":"example","text":"<code>           /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/aero_client/example.py         </code> <p>Example of the AERO client in use.</p>"},{"location":"docs/#aero_client.jobs","title":"jobs","text":"<code>           /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/aero_client/jobs.py         </code> <p>AERO flow compute function definition.</p>"},{"location":"docs/#aero_client.jobs.commit_analysis","title":"commit_analysis()","text":"<pre><code>commit_analysis(*arglist) -&gt; dict\n</code></pre> <p>Commit metadata of analysis function to database.</p> RETURNS DESCRIPTION <code>dict</code> <p>Response from database update.</p> <p> TYPE: <code>dict</code> </p>"},{"location":"docs/#aero_client.jobs.database_commit","title":"database_commit()","text":"<pre><code>database_commit(\n    *args, **kwargs\n) -&gt; dict[str, int | float | str | dict]\n</code></pre> <p>Commit ingested metadata to database</p> RETURNS DESCRIPTION <code>dict</code> <p>Response dictionary returned by user function with optional metrics appended.</p> <p> TYPE: <code>dict[str, int | float | str | dict]</code> </p>"},{"location":"docs/#aero_client.jobs.download","title":"download()","text":"<pre><code>download(*args, **kwargs) -&gt; tuple[str, str]\n</code></pre> <p>Download data from user-specified repository.</p> RETURNS DESCRIPTION <code>tuple[str, str]</code> <p>tuple[str, str]: Path to the data and its associated extension.</p>"},{"location":"docs/#aero_client.jobs.get_versions","title":"get_versions()","text":"<pre><code>get_versions(*function_params) -&gt; dict\n</code></pre> <p>Get the desired version of the source data.</p> RETURNS DESCRIPTION <code>dict</code> <p>Function parameters to send to user-defined analysis function.</p> <p> TYPE: <code>dict</code> </p>"},{"location":"docs/#aero_client.utils","title":"utils","text":"<code>           /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/aero_client/utils.py         </code> <p>DSaaS client util module</p>"},{"location":"docs/#aero_client.utils.PolicyEnum","title":"PolicyEnum","text":"<p>               Bases: <code>IntEnum</code></p> <p>Enum for the types of policies supported by AERO.</p>"},{"location":"docs/#aero_client.utils.PolicyEnum.ALL","title":"ALL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ALL = 3\n</code></pre> <p>...</p>"},{"location":"docs/#aero_client.utils.PolicyEnum.ANY","title":"ANY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ANY = 2\n</code></pre> <p>...</p>"},{"location":"docs/#aero_client.utils.PolicyEnum.INGESTION","title":"INGESTION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INGESTION = 0\n</code></pre> <p>Data ingestion policy.</p>"},{"location":"docs/#aero_client.utils.PolicyEnum.NONE","title":"NONE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NONE = -1\n</code></pre> <p>No policy.</p>"},{"location":"docs/#aero_client.utils.PolicyEnum.TIMER","title":"TIMER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TIMER = 1\n</code></pre> <p>Timer-based policy.</p>"},{"location":"docs/#aero_client.utils.aero_format","title":"aero_format()","text":"<pre><code>aero_format(fn: callable)\n</code></pre> <p>AERO decorator that wraps user analysis function to capture provenance information.</p>"},{"location":"docs/#aero_client.utils.authenticate","title":"authenticate()","text":"<pre><code>authenticate(client: NativeAppAuthClient, scope: str)\n</code></pre> <p>Perform Globus Authentication.</p>"},{"location":"docs/#aero_client.utils.download","title":"download()","text":"<pre><code>download(*args, **kwargs)\n</code></pre> <p>Download data from user-specified repository.</p> RETURNS DESCRIPTION <p>tuple[str, str]: Path to the data and its associated extension.</p>"},{"location":"docs/#aero_client.utils.get_transfer_token","title":"get_transfer_token()","text":"<pre><code>get_transfer_token(collection_uuid: str) -&gt; str\n</code></pre> <p>Get the transfer token belonging to the Globus Guest Collection.</p> <p>This function first verifies whether the token already exists. If it does not, it generates the tokens and updates the token file.</p> PARAMETER DESCRIPTION <code>collection_uuid</code> <p>The UUID of the Globus Guest Collection.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The transfer token for the guest collection</p> <p> TYPE: <code>str</code> </p>"},{"location":"docs/#aero_client.utils.register_function","title":"register_function()","text":"<pre><code>register_function(fn: callable)\n</code></pre> <p>Registers function with Globus Compute by registering the function with the wrapper</p>"},{"location":"docs/SUMMARY/","title":"SUMMARY","text":"<ul> <li>aero_client</li> <li>api</li> <li>cli</li> <li>config</li> <li>error</li> <li>example</li> <li>jobs</li> <li>utils</li> </ul>"},{"location":"docs/api/","title":"api","text":"<code>           /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/aero_client/api.py         </code> <p>DSaaS client API module</p>"},{"location":"docs/api/#aero_client.api.get_flow","title":"get_flow()","text":"<pre><code>get_flow(flow_id: str, inputs_only: bool = True) -&gt; dict\n</code></pre> <p>Get metadata on the flow provided a flow ID.</p> PARAMETER DESCRIPTION <code>flow_id</code> <p>The flow UUID</p> <p> TYPE: <code>str</code> </p> <code>inputs_only</code> <p>Whether to return flow input data exclusively. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>Flow metadata in dictionary representation.</p> <p> TYPE: <code>dict</code> </p>"},{"location":"docs/api/#aero_client.api.globus_logout","title":"globus_logout()","text":"<pre><code>globus_logout()\n</code></pre> <p>Remove the Globus Auth token file to invoke login on next API access.</p>"},{"location":"docs/api/#aero_client.api.list_metadata","title":"list_metadata()","text":"<pre><code>list_metadata(\n    metadata_type: Literal[\"data\", \"prov\", \"flow\"],\n) -&gt; Generator[JSON, JSON, JSON]\n</code></pre> <p>Get the metadata records.</p> PARAMETER DESCRIPTION <code>metadata_type</code> <p>List metadata of a certain type.</p> <p> TYPE: <code>Literal['data', 'prov', 'flow']</code> </p> RETURNS DESCRIPTION <code>JSON</code> <p>Generation[JSON]: a generator returning up to 15 metadata records at a time.</p>"},{"location":"docs/api/#aero_client.api.register_flow","title":"register_flow()","text":"<pre><code>register_flow(\n    endpoint_uuid: str,\n    function_uuid: str,\n    input_data: dict[str | dict[str | int | None]] = {},\n    output_data: dict[str | dict[str, str]] = {},\n    kwargs: JSON = {},\n    config: str | None = None,\n    description: str | None = None,\n    policy: PolicyEnum = PolicyEnum.NONE,\n    timer_delay: int | None = None,\n    pull_function_uuid: str | None = None,\n    commit_function_uuid: str | None = None,\n) -&gt; None\n</code></pre> <p>Register user function to run as a Globus Flow on remote server periodically.</p> PARAMETER DESCRIPTION <code>endpoint_uuid</code> <p>Globus Compute endpoint uuid</p> <p> TYPE: <code>str</code> </p> <code>function_uuid</code> <p>Globus Compute registered function UUID</p> <p> TYPE: <code>str</code> </p> <code>input_data</code> <p>The input data, presented in the format {\"name\": {\"id\": , \"version\": }}. Default is None. <p> TYPE: <code>(dict[str | dict[str, uuid | int]], optional)</code> DEFAULT: <code>{}</code> </p> <code>output_data</code> <p>The output data that will be created, presented in the format {\"name\": {\"url\": }}. Default is None. <p> TYPE: <code>dict[str | dict[str, str]]</code> DEFAULT: <code>{}</code> </p> <code>kwargs</code> <p>Keyword arguments to pass to function. Default is None</p> <p> TYPE: <code>JSON</code> DEFAULT: <code>{}</code> </p> <code>config</code> <p>Path to config file. Default is None.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>A description of the Flow. Default is None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>policy</code> <p>Which policy to use to rerun the flow. Default is never rerun.</p> <p> TYPE: <code>PolicyEnum</code> DEFAULT: <code>NONE</code> </p> <code>timer_delay</code> <p>The timer delay in seconds if PolicyEnum.TIMER is applied. Default is None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>pull_function_uuid</code> <p>the uuid returned when registering either <code>aero_client.jobs.download</code> or <code>aero_client.jobs.get_versions</code> with Globus Compute. The function will register with GC if not provided, but issues may arise if local python version does not match endpoint python version. default is none.</p> <p> TYPE: <code>str | none</code> DEFAULT: <code>None</code> </p> <code>commit_function_uuid</code> <p>the uuid returned when registering either <code>aero_client.jobs.database_commit</code> or <code>aero_client.jobs.commit_analysis</code> with Globus Compute. The function will register with GC if not provided, but issues may arise if local python version does not match endpoint python version. default is none.</p> <p> TYPE: <code>str | none</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>ClientError</code> <p>if function was not able to be registered as a flow, this error is raised</p> RETURNS DESCRIPTION <code>str</code> <p>the timer job uuid.</p> <p> TYPE: <code>None</code> </p>"},{"location":"docs/api/#aero_client.api.register_function","title":"register_function()","text":"<pre><code>register_function(func: Callable)\n</code></pre> <p>Register function to a Globus Compute Client.</p>"},{"location":"docs/api/#aero_client.api.search_sources","title":"search_sources()","text":"<pre><code>search_sources(query: str) -&gt; list[dict[str, str | int]]\n</code></pre> <p>Get the sources that match the query</p> PARAMETER DESCRIPTION <code>query</code> <p>a Globus Search query string</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>list[dict[str, str | int]]</code> <p>list[dict[str, str | int]]: list of sources matching the query</p>"},{"location":"docs/cli/","title":"cli","text":"<code>           /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/aero_client/cli.py         </code> <p>Osprey Command-line interface.</p>"},{"location":"docs/cli/#aero_client.cli.main","title":"main()","text":"<pre><code>main()\n</code></pre> <p>TODO</p>"},{"location":"docs/config/","title":"config","text":"<code>           /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/aero_client/config.py         </code> <p>DSaaS client config module.</p>"},{"location":"docs/config/#aero_client.config.ClientConf","title":"ClientConf","text":"<p>Configuration for the AERO client.</p>"},{"location":"docs/config/#aero_client.config.ClientConf.client_uuid","title":"client_uuid  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>client_uuid: str = 'c78511ef-8cf7-4802-a7e1-7d56e27b1bf8'\n</code></pre> <p>...</p>"},{"location":"docs/error/","title":"error","text":"<code>           /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/aero_client/error.py         </code> <p>DSaaS Client error definition module</p>"},{"location":"docs/error/#aero_client.error.ClientError","title":"ClientError","text":"<pre><code>ClientError(*args: object, **kwargs)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Error for the AERO client.</p>"},{"location":"docs/example/","title":"example","text":"<code>           /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/aero_client/example.py         </code> <p>Example of the AERO client in use.</p>"},{"location":"docs/jobs/","title":"jobs","text":"<code>           /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/aero_client/jobs.py         </code> <p>AERO flow compute function definition.</p>"},{"location":"docs/jobs/#aero_client.jobs.commit_analysis","title":"commit_analysis()","text":"<pre><code>commit_analysis(*arglist) -&gt; dict\n</code></pre> <p>Commit metadata of analysis function to database.</p> RETURNS DESCRIPTION <code>dict</code> <p>Response from database update.</p> <p> TYPE: <code>dict</code> </p>"},{"location":"docs/jobs/#aero_client.jobs.database_commit","title":"database_commit()","text":"<pre><code>database_commit(\n    *args, **kwargs\n) -&gt; dict[str, int | float | str | dict]\n</code></pre> <p>Commit ingested metadata to database</p> RETURNS DESCRIPTION <code>dict</code> <p>Response dictionary returned by user function with optional metrics appended.</p> <p> TYPE: <code>dict[str, int | float | str | dict]</code> </p>"},{"location":"docs/jobs/#aero_client.jobs.download","title":"download()","text":"<pre><code>download(*args, **kwargs) -&gt; tuple[str, str]\n</code></pre> <p>Download data from user-specified repository.</p> RETURNS DESCRIPTION <code>tuple[str, str]</code> <p>tuple[str, str]: Path to the data and its associated extension.</p>"},{"location":"docs/jobs/#aero_client.jobs.get_versions","title":"get_versions()","text":"<pre><code>get_versions(*function_params) -&gt; dict\n</code></pre> <p>Get the desired version of the source data.</p> RETURNS DESCRIPTION <code>dict</code> <p>Function parameters to send to user-defined analysis function.</p> <p> TYPE: <code>dict</code> </p>"},{"location":"docs/utils/","title":"utils","text":"<code>           /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/aero_client/utils.py         </code> <p>DSaaS client util module</p>"},{"location":"docs/utils/#aero_client.utils.PolicyEnum","title":"PolicyEnum","text":"<p>               Bases: <code>IntEnum</code></p> <p>Enum for the types of policies supported by AERO.</p>"},{"location":"docs/utils/#aero_client.utils.PolicyEnum.ALL","title":"ALL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ALL = 3\n</code></pre> <p>...</p>"},{"location":"docs/utils/#aero_client.utils.PolicyEnum.ANY","title":"ANY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ANY = 2\n</code></pre> <p>...</p>"},{"location":"docs/utils/#aero_client.utils.PolicyEnum.INGESTION","title":"INGESTION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INGESTION = 0\n</code></pre> <p>Data ingestion policy.</p>"},{"location":"docs/utils/#aero_client.utils.PolicyEnum.NONE","title":"NONE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NONE = -1\n</code></pre> <p>No policy.</p>"},{"location":"docs/utils/#aero_client.utils.PolicyEnum.TIMER","title":"TIMER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TIMER = 1\n</code></pre> <p>Timer-based policy.</p>"},{"location":"docs/utils/#aero_client.utils.aero_format","title":"aero_format()","text":"<pre><code>aero_format(fn: callable)\n</code></pre> <p>AERO decorator that wraps user analysis function to capture provenance information.</p>"},{"location":"docs/utils/#aero_client.utils.authenticate","title":"authenticate()","text":"<pre><code>authenticate(client: NativeAppAuthClient, scope: str)\n</code></pre> <p>Perform Globus Authentication.</p>"},{"location":"docs/utils/#aero_client.utils.download","title":"download()","text":"<pre><code>download(*args, **kwargs)\n</code></pre> <p>Download data from user-specified repository.</p> RETURNS DESCRIPTION <p>tuple[str, str]: Path to the data and its associated extension.</p>"},{"location":"docs/utils/#aero_client.utils.get_transfer_token","title":"get_transfer_token()","text":"<pre><code>get_transfer_token(collection_uuid: str) -&gt; str\n</code></pre> <p>Get the transfer token belonging to the Globus Guest Collection.</p> <p>This function first verifies whether the token already exists. If it does not, it generates the tokens and updates the token file.</p> PARAMETER DESCRIPTION <code>collection_uuid</code> <p>The UUID of the Globus Guest Collection.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The transfer token for the guest collection</p> <p> TYPE: <code>str</code> </p>"},{"location":"docs/utils/#aero_client.utils.register_function","title":"register_function()","text":"<pre><code>register_function(fn: callable)\n</code></pre> <p>Registers function with Globus Compute by registering the function with the wrapper</p>"}]}